apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "tensor-fusion.fullname" . }}-controller
  namespace: {{ include "tensor-fusion.namespace" . }}
  labels:
    tensor-fusion.ai/component: operator
    {{- include "tensor-fusion.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.controller.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "tensor-fusion.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
      app.kubernetes.io/component: controller
      tensor-fusion.ai/component: operator
  template:
    metadata:
      {{- with .Values.controller.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        app.kubernetes.io/name: {{ include "tensor-fusion.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/component: controller
        tensor-fusion.ai/component: operator
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "tensor-fusion.serviceAccountName" . }}
      enableServiceLinks: false
      containers:
        - name: controller
          image: "{{ .Values.controller.image.repository }}:{{ .Values.controller.image.tag | default .Chart.AppVersion }}"
          command: 
            {{- toYaml .Values.controller.command | nindent 12 }}
          livenessProbe:
            {{- toYaml .Values.controller.livenessProbe | nindent 12 }}
          readinessProbe:
            {{- toYaml .Values.controller.readinessProbe | nindent 12 }}
          resources:
            {{- toYaml .Values.controller.resources | nindent 12 }}
          ports:
            - name: http
              containerPort: 8080
            - name: metrics
              containerPort: 8081
          env:
            - name: OPERATOR_NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            # when deploy with AutoSelect mode, GPU node is managed by Kubernetes rather than TensorFusion, thus, need to specify the label selector to generate the GPUNode custom resource
            - name: INITIAL_GPU_NODE_LABEL_SELECTOR
              value: "{{ default "nvidia.com/gpu.present=true" .Values.initialGpuNodeLabelSelector }}"
            - name: TSDB_MYSQL_HOST
              value: "{{ .Values.greptime.host }}"
            - name: TSDB_MYSQL_PORT
              value: "{{ .Values.greptime.port }}"
            - name: TSDB_MYSQL_DATABASE
              value: "{{ .Values.greptime.db }}"
            {{- if .Values.greptime.isCloud }}
            - name: TSDB_MYSQL_USER
              value: "{{ .Values.greptime.user }}"
            - name: TSDB_MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-greptimedb-secret
                  key: password
            {{- else }}
            - name: TSDB_MYSQL_USER
              value: root
            {{- end }}
            {{- if .Values.controller.nvidiaOperatorProgressiveMigration }}
            - name: NVIDIA_OPERATOR_PROGRESSIVE_MIGRATION
              value: "true"
            {{- end }}
          volumeMounts:
            - name: cert
              readOnly: true
              mountPath: /tmp/k8s-webhook-server/serving-certs
            - name: logs
              mountPath: /logs
            - name: cloud-vendor-credentials
              mountPath: /tmp/secret
              readOnly: true
            - name: gpu-info
              mountPath: /etc/tensor-fusion/gpu-info.yaml
              subPath: gpu-info.yaml
              readOnly: true
            - name: config
              mountPath: /etc/tensor-fusion/config.yaml
              subPath: config.yaml
              readOnly: true
            - name: config
              mountPath: /etc/tensor-fusion/scheduler-config.yaml
              subPath: scheduler-config.yaml
              readOnly: true
        {{- if .Values.agent.agentId }}
        - name: cluster-agent
          image: "{{ .Values.agent.image.repository }}:{{ .Values.agent.image.tag | default "latest" }}"
          env:
            - name: CLOUD_ENDPOINT
              value: "{{ .Values.agent.cloudEndpoint }}"
            - name: AGENT_ID
              value: "{{ .Values.agent.agentId }}"
            - name: ENROLL_TOKEN
              value: "{{ .Values.agent.enrollToken }}"
            - name: TSDB_MYSQL_HOST
              value: "{{ .Values.greptime.host }}"
            - name: TSDB_MYSQL_PORT
              value: "{{ .Values.greptime.port }}"
            - name: TSDB_MYSQL_DATABASE
              value: "{{ .Values.greptime.db }}"
            {{- if .Values.greptime.isCloud }}
            - name: TSDB_MYSQL_USER
              value: "{{ .Values.greptime.user }}"
            - name: TSDB_MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-greptimedb-secret
                  key: password
            {{- else }}
            - name: TSDB_MYSQL_USER
              value: "root"
            {{- end }}
          resources:
            {{- toYaml .Values.agent.resources | nindent 12 }}
        {{- end }}
        - name: vector
          image: {{ .Values.controller.vectorAgentImage }}
          env:
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: spec.nodeName
          resources:
            requests:
              cpu: 50m
              memory: 64Mi
            limits:
              cpu: 1000m
              memory: 512Mi
          volumeMounts:
            - name: logs
              mountPath: /logs
            - name: vector-config
              mountPath: /etc/vector/vector.yaml
              subPath: vector-operator.yaml
            - name: kubernetes-logs
              mountPath: /var/log/pods
      volumes:
        - name: cert
          secret:
            secretName: {{.Values.controller.admissionWebhooks.secretName}}
            defaultMode: 420
            items:
              - key: cert
                path: tls.crt
              - key: key
                path: tls.key
        - name: vector-config
          configMap:
            name: tensor-fusion-sys-vector-config
            defaultMode: 420
        - name: cloud-vendor-credentials
          secret:
            secretName: tf-cloud-vendor-credentials
            defaultMode: 420
        - configMap:
            defaultMode: 420
            name: tensor-fusion-sys-public-gpu-info
          name: gpu-info
        - configMap:
            defaultMode: 420
            name: {{ .Release.Name }}-config
          name: config
        - name: logs
          emptyDir: {}
        - name: kubernetes-logs
          hostPath:
            path: /var/log/pods
            type: DirectoryOrCreate
      {{- with .Values.controller.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.controller.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
